CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
if("${CMAKE_VERSION}" VERSION_GREATER 3.0.0)
    cmake_policy(SET CMP0042 NEW)
endif()

### Project configuration
PROJECT(GiGaSdk)
SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMakeModules")
SET(DOC_PATH "${CMAKE_SOURCE_DIR}/doc")
SET(FILE_PATH "${CMAKE_SOURCE_DIR}/files")
SET(SRC_PATH "${CMAKE_SOURCE_DIR}/src")
SET(VENDORS_PATH "${CMAKE_SOURCE_DIR}/vendors")

### Set Configuration Type
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Debug")
ENDIF(NOT CMAKE_BUILD_TYPE)
IF(CMAKE_BUILD_TYPE MATCHES "Debug")
    ADD_DEFINITIONS(-DDEBUG)
ENDIF(CMAKE_BUILD_TYPE MATCHES "Debug")

IF(USE_DEV_GG)
    ADD_DEFINITIONS(-DUSE_DEV_GG)
    message("USING DEV.GG")
ELSE()
    message(using dev.gg)
    message("USING GIGA.GG")
ENDIF(USE_DEV_GG)
IF(USE_BOOST_LOG)
    ADD_DEFINITIONS(-DUSE_BOOST_LOG)
ENDIF(USE_BOOST_LOG)
IF(WITH_DEBUG_LOG)
    ADD_DEFINITIONS(-DDEBUG_LOG)
ENDIF(WITH_DEBUG_LOG)

### Specific configuration for Visual Studio
IF(MSVC)
    ADD_DEFINITIONS(-DNOMINMAX) 

    IF (CMAKE_BUILD_TYPE MATCHES "Debug")
        SET(DEPS_PATH "${VENDORS_PATH}/VS2015/deps/Debug")
    ELSE()
        SET(DEPS_PATH "${VENDORS_PATH}/VS2015/deps/Release")
    ENDIF()
    LIST(APPEND CMAKE_PREFIX_PATH "${VENDORS_PATH}/VS2015/deps/" "${DEPS_PATH}")
    link_directories("${DEPS_PATH}/lib")
    link_directories("${VENDORS_PATH}/VS2015/deps/lib")
ENDIF(MSVC)

### FLAGS
IF(MSVC)
    SET(CMAKE_CXX_WARNING_LEVEL 4)
    IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
        STRING(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    ELSE(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
    ENDIF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4290 /wd4127 /wd4714")
    # Target windows >= 7
    ADD_DEFINITIONS(-DWINVER=0x601)
    ADD_DEFINITIONS(-D_WIN32_WINNT=0x601)
ELSE(MSVC)
    SET (CMAKE_CXX_FLAGS "-std=c++1y -Wall -Wextra -Wconversion -fmessage-length=0" )
    SET (CMAKE_CXX_FLAGS_DEBUG "-O0 -ggdb3 -pg" )
    SET (CMAKE_CXX_FLAGS_RELEASE "-O2" )
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__FILENAME__='\"$(subst ${CMAKE_SOURCE_DIR}/,,$(abspath $<))\"'")
ENDIF(MSVC)


### Setting debug postfix
SET(CMAKE_DEBUG_POSTFIX d)

### Setting version
SET(PROJECT_MAJOR_VERSION 0)
SET(PROJECT_MINOR_VERSION 3)
SET(PROJECT_PATCH_VERSION 0)
SET(PROJECT_VERSION ${PROJECT_MAJOR_VERSION}.${PROJECT_MINOR_VERSION}.${PROJECT_PATCH_VERSION})
INCLUDE(GetGitRevisionDescription)
get_git_head_revision(GIT_REFSPEC GIT_SHA1)
CONFIGURE_FILE("${CMAKE_MODULE_PATH}/version.h.in" "${SRC_PATH}/giga/version.h" IMMEDIATE @ONLY)


SET(PROJECT_DESCRIPTION "The GiGa.GG C++ SDK")
SET(PROJECT_LOGO "https://giga.gg/public/assets/img/avatar215.jpg")

IF(USE_BOOST_LOG)
  SET(BOOST_LOG_CMP log log_setup thread)
ENDIF(USE_BOOST_LOG)

### Project dependancies
SET(Boost_USE_STATIC_LIBS ON)
FIND_PACKAGE(OpenSSL REQUIRED)
FIND_PACKAGE(Boost REQUIRED COMPONENTS regex system filesystem program_options chrono thread ${BOOST_LOG_CMP} REQUIRED)
FIND_PACKAGE(Casablanca REQUIRED)
FIND_PACKAGE(Crypto++ REQUIRED)
FIND_PACKAGE(CURL REQUIRED)
FIND_PACKAGE(Curlcpp REQUIRED)
FIND_PACKAGE(Threads REQUIRED)

IF (USE_CRYPTO_PP)
    ADD_DEFINITIONS("-DCRYPTOPP")
ENDIF()

INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${CASABLANCA_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${BOOST_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${CRYPTO++_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${CURLCPP_INCLUDE_DIR})

###
INCLUDE_DIRECTORIES(src)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(${FILE_PATH})

### Uninstall
CONFIGURE_FILE("${CMAKE_MODULE_PATH}/cmake_uninstall.cmake.in" "${CMAKE_MODULE_PATH}/cmake_uninstall.cmake" IMMEDIATE @ONLY)
ADD_CUSTOM_TARGET(uninstall "${CMAKE_COMMAND}" -P "${CMAKE_MODULE_PATH}/cmake_uninstall.cmake")

## Doc
FIND_PACKAGE(Doxygen)
IF (DOXYGEN_FOUND AND NOT NO_DOCUMENTATION)
    IF    (CMAKE_BUILD_TOOL MATCHES "(msdev|devenv)")
        SET(DOXY_WARN_FORMAT "\"$file($line) : $text \"")
    ELSE  (CMAKE_BUILD_TOOL MATCHES "(msdev|devenv)")
        SET(DOXY_WARN_FORMAT "\"$file:$line: $text \"")
    ENDIF (CMAKE_BUILD_TOOL MATCHES "(msdev|devenv)")

    IF(EXISTS ${CMAKE_MODULE_PATH}/doxy.config.in )
        CONFIGURE_FILE(${CMAKE_MODULE_PATH}/doxy.config.in ${DOC_PATH}/doxy.config)
        SET(DOXY_CONFIG "${DOC_PATH}/doxy.config")
        ADD_CUSTOM_TARGET(doc ${DOXYGEN_EXECUTABLE} ${DOXY_CONFIG})
        MESSAGE(STATUS "ADD target : doc")
    ENDIF(EXISTS ${CMAKE_MODULE_PATH}/doxy.config.in )
ENDIF (DOXYGEN_FOUND AND NOT NO_DOCUMENTATION)

## Package
INCLUDE("InstallRequiredSystemLibraries")
if( CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS )
    IF (MSVC)
	    SET(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS} "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/redist/x86/Microsoft.VC140.CRT/concrt140.dll")
	    SET(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS} "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/redist/x86/Microsoft.VC140.CRT/vccorlib140.dll")
	ENDIF(MSVC)
    install( PROGRAMS ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS} DESTINATION bin COMPONENT applications)
endif( CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS )

INCLUDE("CPackInstalls/release/CPackConfig.cmake")
END_PKG()

CONFIGURE_FILE("${CMAKE_MODULE_PATH}/path.h.in" "${CMAKE_SOURCE_DIR}/src/tests/path.h" IMMEDIATE @ONLY)
INCLUDE(CTest)
IF(BUILD_TESTING)
  INCLUDE("CTestConfig.txt")
ENDIF()
